{
    "swagger": "2.0",
    "info":
    {
        "description": "This is a fabulous Rest API Documentation framework to showcase the api we created on Node.js and Express.",
        "version": "1.0.0",
        "title": "Rest API Documentation",
        "contact":
        {
		  "name": "Don Payne",
		  "url": "http://www.swagger.io"
		}
    },
    "host": "donpayne.io",
    "basePath": "/api",
    "tags": [
    {
        "name": "skill",
        "description": "Everything about your Skills"
    }],
    "schemes": ["http"],
    "paths":
    {
        "/skills":
        {
            "get":
            {
                "tags": ["skill"],
                "summary": "Finds skills by status",
                "description": "Multiple status values can be provided with comma seperated strings",
                "operationId": "findPetsByStatus",
                "produces": ["application/json"],
                "parameters": [
                {
                    "name": "status",
                    "in": "query",
                    "description": "Status values that need to be considered for filter",
                    "required": true,
                    "type": "array",
                    "items":
                    {
                        "type": "string",
                        "enum": ["available", "pending", "sold"],
                        "default": "available"
                    },
                    "collectionFormat": "csv"
                }],
                "responses":
                {
                    "200":
                    {
                        "description": "successful operation",
                        "schema":
                        {
                            "type": "array",
                            "items":
                            {
                                "$ref": "#/definitions/Pet"
                            }
                        }
                    },
                    "400":
                    {
                        "description": "Invalid status value"
                    }
                },
                "security": [
                {
                    "petstore_auth": ["write:pets", "read:pets"]
                }]
            },
            "post":
            {
                "tags": ["skill"],
                "summary": "Add a new skill",
                "description": "",
                "operationId": "addSkill",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                {
                    "in": "body",
                    "name": "body",
                    "description": "Skill object that needs to be added",
                    "required": true,
                    "schema":
                    {
                        "$ref": "#/definitions/skill"
                    }
                }],
                "responses":
                {
                    "405":
                    {
                        "description": "Invalid input"
                    }
                },
                "security": [
                {
                    "petstore_auth": ["write:skills", "read:skills"]
                }]
            }
        },
        "/skills/{Id}":
        {
            "get":
            {
                "tags": ["skill"],
                "summary": "Find skill by ID",
                "description": "Returns a single pet",
                "operationId": "getPetById",
                "produces": ["application/xml", "application/json"],
                "parameters": [
                {
                    "name": "petId",
                    "in": "path",
                    "description": "ID of pet to return",
                    "required": true,
                    "type": "integer",
                    "format": "int64"
                }],
                "responses":
                {
                    "200":
                    {
                        "description": "successful operation",
                        "schema":
                        {
                            "$ref": "#/definitions/Pet"
                        }
                    },
                    "400":
                    {
                        "description": "Invalid ID supplied"
                    },
                    "404":
                    {
                        "description": "Pet not found"
                    }
                },
                "security": [
                {
                    "api_key": []
                }]
            },
            "put":
            {
                "tags": ["skill"],
                "summary": "Update an existing skill",
                "description": "",
                "operationId": "updatePet",
                "consumes": ["application/json", "application/xml"],
                "produces": ["application/xml", "application/json"],
                "parameters": [
                {
                    "in": "body",
                    "name": "body",
                    "description": "Pet object that needs to be added to the store",
                    "required": true,
                    "schema":
                    {
                        "$ref": "#/definitions/Pet"
                    }
                }],
                "responses":
                {
                    "400":
                    {
                        "description": "Invalid ID supplied"
                    },
                    "404":
                    {
                        "description": "Pet not found"
                    },
                    "405":
                    {
                        "description": "Validation exception"
                    }
                },
                "security": [
                {
                    "petstore_auth": ["write:pets", "read:pets"]
                }]
            },
            "patch":
            {
                "tags": ["skill"],
                "summary": "Update an existing skill",
                "description": "",
                "operationId": "updatePet",
                "consumes": ["application/json", "application/xml"],
                "produces": ["application/xml", "application/json"],
                "parameters": [
                {
                    "in": "body",
                    "name": "body",
                    "description": "Pet object that needs to be added to the store",
                    "required": true,
                    "schema":
                    {
                        "$ref": "#/definitions/Pet"
                    }
                }],
                "responses":
                {
                    "400":
                    {
                        "description": "Invalid ID supplied"
                    },
                    "404":
                    {
                        "description": "Pet not found"
                    },
                    "405":
                    {
                        "description": "Validation exception"
                    }
                },
                "security": [
                {
                    "petstore_auth": ["write:pets", "read:pets"]
                }]
            },
            "delete":
            {
                "tags": ["skill"],
                "summary": "Deletes a skill",
                "description": "",
                "operationId": "deletePet",
                "produces": ["application/xml", "application/json"],
                "parameters": [
                {
                    "name": "api_key",
                    "in": "header",
                    "required": false,
                    "type": "string"
                },
                {
                    "name": "petId",
                    "in": "path",
                    "description": "Pet id to delete",
                    "required": true,
                    "type": "integer",
                    "format": "int64"
                }],
                "responses":
                {
                    "400":
                    {
                        "description": "Invalid pet value"
                    }
                },
                "security": [
                {
                    "petstore_auth": ["write:pets", "read:pets"]
                }]
            }
        }
    },
    "securityDefinitions":
    {
        "petstore_auth":
        {
            "type": "oauth2",
            "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
            "flow": "implicit",
            "scopes":
            {
                "write:pets": "modify pets in your account",
                "read:pets": "read your pets"
            }
        },
        "api_key":
        {
            "type": "apiKey",
            "name": "api_key",
            "in": "header"
        }
    },
    "definitions":
    {
        "Order":
        {
            "type": "object",
            "properties":
            {
                "id":
                {
                    "type": "integer",
                    "format": "int64"
                },
                "petId":
                {
                    "type": "integer",
                    "format": "int64"
                },
                "quantity":
                {
                    "type": "integer",
                    "format": "int32"
                },
                "shipDate":
                {
                    "type": "string",
                    "format": "date-time"
                },
                "status":
                {
                    "type": "string",
                    "description": "Order Status",
                    "enum": ["placed", "approved", "delivered"]
                },
                "complete":
                {
                    "type": "boolean",
                    "default": false
                }
            },
            "xml":
            {
                "name": "Order"
            }
        },
        "Category":
        {
            "type": "object",
            "properties":
            {
                "id":
                {
                    "type": "integer",
                    "format": "int64"
                },
                "name":
                {
                    "type": "string"
                }
            },
            "xml":
            {
                "name": "Category"
            }
        },
        "User":
        {
            "type": "object",
            "properties":
            {
                "id":
                {
                    "type": "integer",
                    "format": "int64"
                },
                "username":
                {
                    "type": "string"
                },
                "firstName":
                {
                    "type": "string"
                },
                "lastName":
                {
                    "type": "string"
                },
                "email":
                {
                    "type": "string"
                },
                "password":
                {
                    "type": "string"
                },
                "phone":
                {
                    "type": "string"
                },
                "userStatus":
                {
                    "type": "integer",
                    "format": "int32",
                    "description": "User Status"
                }
            },
            "xml":
            {
                "name": "User"
            }
        },
        "Tag":
        {
            "type": "object",
            "properties":
            {
                "id":
                {
                    "type": "integer",
                    "format": "int64"
                },
                "name":
                {
                    "type": "string"
                }
            },
            "xml":
            {
                "name": "Tag"
            }
        },
        "skill":
        {
            "type": "object",
            "required": ["name", "photoUrls"],
            "properties":
            {
                "id":
                {
                    "type": "integer",
                    "format": "int64"
                },
                "category":
                {
                    "$ref": "#/definitions/Category"
                },
                "name":
                {
                    "type": "string",
                    "example": "doggie"
                },
                "photoUrls":
                {
                    "type": "array",
                    "xml":
                    {
                        "name": "photoUrl",
                        "wrapped": true
                    },
                    "items":
                    {
                        "type": "string"
                    }
                },
                "tags":
                {
                    "type": "array",
                    "xml":
                    {
                        "name": "tag",
                        "wrapped": true
                    },
                    "items":
                    {
                        "$ref": "#/definitions/Tag"
                    }
                },
                "status":
                {
                    "type": "string",
                    "description": "pet status in the store",
                    "enum": ["available", "pending", "sold"]
                }
            },
            "xml":
            {
                "name": "Pet"
            }
        },
        "ApiResponse":
        {
            "type": "object",
            "properties":
            {
                "code":
                {
                    "type": "integer",
                    "format": "int32"
                },
                "type":
                {
                    "type": "string"
                },
                "message":
                {
                    "type": "string"
                }
            }
        }
    }
}